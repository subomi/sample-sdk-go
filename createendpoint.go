// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

type CreateEndpoint struct {
	// Convoy supports two [signature formats](https://getconvoy.io/docs/product-manual/signatures)
	// -- simple or advanced. If left unspecified, we default to false.
	AdvancedSignatures *bool `json:"advanced_signatures,omitempty"`
	// Deprecated but necessary for backward compatibility
	AppID *string `json:"appID,omitempty"`
	// This is used to define any custom authentication required by the endpoint. This
	// shouldn't be needed often because webhook endpoints usually should be exposed to
	// the internet.
	Authentication *EndpointAuthentication `json:"authentication,omitempty"`
	// Human-readable description of the endpoint. Think of this as metadata describing
	// the endpoint
	Description *string `json:"description,omitempty"`
	// Define endpoint http timeout in seconds.
	HTTPTimeout *int64 `json:"http_timeout,omitempty"`
	// This is used to manually enable/disable the endpoint.
	IsDisabled *bool `json:"is_disabled,omitempty"`
	// Endpoint name.
	Name string `json:"name"`
	// The OwnerID is used to group more than one endpoint together to achieve
	// [fanout](https://getconvoy.io/docs/manual/endpoints#Endpoint%20Owner%20ID)
	OwnerID *string `json:"owner_id,omitempty"`
	// Rate limit is the total number of requests to be sent to an endpoint in
	// the time duration specified in RateLimitDuration
	RateLimit *int64 `json:"rate_limit,omitempty"`
	// Rate limit duration specifies the time range for the rate limit.
	RateLimitDuration *int64 `json:"rate_limit_duration,omitempty"`
	// Endpoint's webhook secret. If not provided, Convoy autogenerates one for the endpoint.
	Secret *string `json:"secret,omitempty"`
	// Slack webhook URL is an alternative method to support email where endpoint developers
	// can receive failure notifications on a slack channel.
	SlackWebhookURL *string `json:"slack_webhook_url,omitempty"`
	// Endpoint developers support email. This is used for communicating endpoint state
	// changes. You should always turn this on when disabling endpoints are enabled.
	SupportEmail *string `json:"support_email,omitempty"`
	// URL is the endpoint's URL prefixed with https. non-https urls are currently
	// not supported.
	URL string `json:"url"`
}

func (o *CreateEndpoint) GetAdvancedSignatures() *bool {
	if o == nil {
		return nil
	}
	return o.AdvancedSignatures
}

func (o *CreateEndpoint) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *CreateEndpoint) GetAuthentication() *EndpointAuthentication {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *CreateEndpoint) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateEndpoint) GetHTTPTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPTimeout
}

func (o *CreateEndpoint) GetIsDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsDisabled
}

func (o *CreateEndpoint) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateEndpoint) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *CreateEndpoint) GetRateLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *CreateEndpoint) GetRateLimitDuration() *int64 {
	if o == nil {
		return nil
	}
	return o.RateLimitDuration
}

func (o *CreateEndpoint) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateEndpoint) GetSlackWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.SlackWebhookURL
}

func (o *CreateEndpoint) GetSupportEmail() *string {
	if o == nil {
		return nil
	}
	return o.SupportEmail
}

func (o *CreateEndpoint) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}
