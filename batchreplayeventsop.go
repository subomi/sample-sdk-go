// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

import (
	"encoding/json"
	"fmt"
)

type BatchReplayEventsDirection string

const (
	BatchReplayEventsDirectionNext BatchReplayEventsDirection = "next"
	BatchReplayEventsDirectionPrev BatchReplayEventsDirection = "prev"
)

func (e BatchReplayEventsDirection) ToPointer() *BatchReplayEventsDirection {
	return &e
}
func (e *BatchReplayEventsDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "next":
		fallthrough
	case "prev":
		*e = BatchReplayEventsDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchReplayEventsDirection: %v", v)
	}
}

type BatchReplayEventsRequest struct {
	// Project ID
	ProjectID string                      `pathParam:"style=simple,explode=false,name=projectID"`
	Direction *BatchReplayEventsDirection `queryParam:"style=form,explode=true,name=direction"`
	// The end date
	EndDate *string `queryParam:"style=form,explode=true,name=endDate"`
	// A list of endpoint ids to filter by
	EndpointID []string `queryParam:"style=form,explode=true,name=endpointId"`
	// IdempotencyKey to filter by
	IdempotencyKey *string `queryParam:"style=form,explode=true,name=idempotencyKey"`
	// A pagination cursor to fetch the next page of a list
	NextPageCursor *string `queryParam:"style=form,explode=true,name=next_page_cursor"`
	// The number of items to return per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A pagination cursor to fetch the previous page of a list
	PrevPageCursor *string `queryParam:"style=form,explode=true,name=prev_page_cursor"`
	// Any arbitrary value to filter the events payload
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Sort order, values are `ASC` or `DESC`, defaults to `DESC`
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// A list of Source IDs to filter the events by.
	SourceID []string `queryParam:"style=form,explode=true,name=sourceId"`
	// The start date
	StartDate *string `queryParam:"style=form,explode=true,name=startDate"`
}

func (o *BatchReplayEventsRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *BatchReplayEventsRequest) GetDirection() *BatchReplayEventsDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *BatchReplayEventsRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *BatchReplayEventsRequest) GetEndpointID() []string {
	if o == nil {
		return nil
	}
	return o.EndpointID
}

func (o *BatchReplayEventsRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *BatchReplayEventsRequest) GetNextPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextPageCursor
}

func (o *BatchReplayEventsRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *BatchReplayEventsRequest) GetPrevPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.PrevPageCursor
}

func (o *BatchReplayEventsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *BatchReplayEventsRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *BatchReplayEventsRequest) GetSourceID() []string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *BatchReplayEventsRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

// BatchReplayEventsNotFoundError - Not Found
type BatchReplayEventsNotFoundError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &BatchReplayEventsNotFoundError{}

func (e *BatchReplayEventsNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BatchReplayEventsUnauthorizedError - Unauthorized
type BatchReplayEventsUnauthorizedError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &BatchReplayEventsUnauthorizedError{}

func (e *BatchReplayEventsUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BatchReplayEventsBadRequestError - Bad Request
type BatchReplayEventsBadRequestError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &BatchReplayEventsBadRequestError{}

func (e *BatchReplayEventsBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BatchReplayEventsResponseBody - OK
type BatchReplayEventsResponseBody struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
	Data    *string `json:"data,omitempty"`
}

func (o *BatchReplayEventsResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *BatchReplayEventsResponseBody) GetStatus() *bool {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BatchReplayEventsResponseBody) GetData() *string {
	if o == nil {
		return nil
	}
	return o.Data
}

type BatchReplayEventsResponse struct {
	HTTPMeta HTTPMetadata `json:"-"`
	// OK
	Object *BatchReplayEventsResponseBody
}

func (o *BatchReplayEventsResponse) GetHTTPMeta() HTTPMetadata {
	if o == nil {
		return HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BatchReplayEventsResponse) GetObject() *BatchReplayEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
