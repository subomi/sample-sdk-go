// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

import (
	"encoding/json"
	"fmt"
)

type BatchRetryEventDeliveryDirection string

const (
	BatchRetryEventDeliveryDirectionNext BatchRetryEventDeliveryDirection = "next"
	BatchRetryEventDeliveryDirectionPrev BatchRetryEventDeliveryDirection = "prev"
)

func (e BatchRetryEventDeliveryDirection) ToPointer() *BatchRetryEventDeliveryDirection {
	return &e
}
func (e *BatchRetryEventDeliveryDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "next":
		fallthrough
	case "prev":
		*e = BatchRetryEventDeliveryDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchRetryEventDeliveryDirection: %v", v)
	}
}

type BatchRetryEventDeliveryRequest struct {
	// Project ID
	ProjectID string                            `pathParam:"style=simple,explode=false,name=projectID"`
	Direction *BatchRetryEventDeliveryDirection `queryParam:"style=form,explode=true,name=direction"`
	// The end date
	EndDate *string `queryParam:"style=form,explode=true,name=endDate"`
	// A list of endpoint IDs to filter by
	EndpointID []string `queryParam:"style=form,explode=true,name=endpointId"`
	// Event ID to filter by
	EventID *string `queryParam:"style=form,explode=true,name=eventId"`
	// EventType to filter by
	EventType *string `queryParam:"style=form,explode=true,name=event_type"`
	// IdempotencyKey to filter by
	IdempotencyKey *string `queryParam:"style=form,explode=true,name=idempotencyKey"`
	// A pagination cursor to fetch the next page of a list
	NextPageCursor *string `queryParam:"style=form,explode=true,name=next_page_cursor"`
	// The number of items to return per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A pagination cursor to fetch the previous page of a list
	PrevPageCursor *string `queryParam:"style=form,explode=true,name=prev_page_cursor"`
	// Sort order, values are `ASC` or `DESC`, defaults to `DESC`
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The start date
	StartDate *string `queryParam:"style=form,explode=true,name=startDate"`
	// A list of event delivery statuses to filter by
	Status []string `queryParam:"style=form,explode=true,name=status"`
	// SubscriptionID to filter by
	SubscriptionID *string `queryParam:"style=form,explode=true,name=subscriptionId"`
}

func (o *BatchRetryEventDeliveryRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *BatchRetryEventDeliveryRequest) GetDirection() *BatchRetryEventDeliveryDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *BatchRetryEventDeliveryRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *BatchRetryEventDeliveryRequest) GetEndpointID() []string {
	if o == nil {
		return nil
	}
	return o.EndpointID
}

func (o *BatchRetryEventDeliveryRequest) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *BatchRetryEventDeliveryRequest) GetEventType() *string {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *BatchRetryEventDeliveryRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *BatchRetryEventDeliveryRequest) GetNextPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextPageCursor
}

func (o *BatchRetryEventDeliveryRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *BatchRetryEventDeliveryRequest) GetPrevPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.PrevPageCursor
}

func (o *BatchRetryEventDeliveryRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *BatchRetryEventDeliveryRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *BatchRetryEventDeliveryRequest) GetStatus() []string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BatchRetryEventDeliveryRequest) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

// BatchRetryEventDeliveryNotFoundError - Not Found
type BatchRetryEventDeliveryNotFoundError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &BatchRetryEventDeliveryNotFoundError{}

func (e *BatchRetryEventDeliveryNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BatchRetryEventDeliveryUnauthorizedError - Unauthorized
type BatchRetryEventDeliveryUnauthorizedError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &BatchRetryEventDeliveryUnauthorizedError{}

func (e *BatchRetryEventDeliveryUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BatchRetryEventDeliveryBadRequestError - Bad Request
type BatchRetryEventDeliveryBadRequestError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &BatchRetryEventDeliveryBadRequestError{}

func (e *BatchRetryEventDeliveryBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// BatchRetryEventDeliveryResponseBody - OK
type BatchRetryEventDeliveryResponseBody struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
	Data    *Object `json:"data,omitempty"`
}

func (o *BatchRetryEventDeliveryResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *BatchRetryEventDeliveryResponseBody) GetStatus() *bool {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BatchRetryEventDeliveryResponseBody) GetData() *Object {
	if o == nil {
		return nil
	}
	return o.Data
}

type BatchRetryEventDeliveryResponse struct {
	HTTPMeta HTTPMetadata `json:"-"`
	// OK
	Object *BatchRetryEventDeliveryResponseBody
}

func (o *BatchRetryEventDeliveryResponse) GetHTTPMeta() HTTPMetadata {
	if o == nil {
		return HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BatchRetryEventDeliveryResponse) GetObject() *BatchRetryEventDeliveryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
