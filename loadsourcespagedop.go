// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

import (
	"encoding/json"
	"fmt"
)

type LoadSourcesPagedDirection string

const (
	LoadSourcesPagedDirectionNext LoadSourcesPagedDirection = "next"
	LoadSourcesPagedDirectionPrev LoadSourcesPagedDirection = "prev"
)

func (e LoadSourcesPagedDirection) ToPointer() *LoadSourcesPagedDirection {
	return &e
}
func (e *LoadSourcesPagedDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "next":
		fallthrough
	case "prev":
		*e = LoadSourcesPagedDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoadSourcesPagedDirection: %v", v)
	}
}

type LoadSourcesPagedRequest struct {
	// Project ID
	ProjectID string                     `pathParam:"style=simple,explode=false,name=projectID"`
	Direction *LoadSourcesPagedDirection `queryParam:"style=form,explode=true,name=direction"`
	// A pagination cursor to fetch the next page of a list
	NextPageCursor *string `queryParam:"style=form,explode=true,name=next_page_cursor"`
	// The number of items to return per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A pagination cursor to fetch the previous page of a list
	PrevPageCursor *string `queryParam:"style=form,explode=true,name=prev_page_cursor"`
	// The custom source provider e.g. twitter, shopify
	Provider *string `queryParam:"style=form,explode=true,name=provider"`
	// Sort order, values are `ASC` or `DESC`, defaults to `DESC`
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The source type e.g. http, pub_sub
	Type *string `queryParam:"style=form,explode=true,name=type"`
}

func (o *LoadSourcesPagedRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *LoadSourcesPagedRequest) GetDirection() *LoadSourcesPagedDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *LoadSourcesPagedRequest) GetNextPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextPageCursor
}

func (o *LoadSourcesPagedRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *LoadSourcesPagedRequest) GetPrevPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.PrevPageCursor
}

func (o *LoadSourcesPagedRequest) GetProvider() *string {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *LoadSourcesPagedRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *LoadSourcesPagedRequest) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

// LoadSourcesPagedNotFoundError - Not Found
type LoadSourcesPagedNotFoundError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &LoadSourcesPagedNotFoundError{}

func (e *LoadSourcesPagedNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// LoadSourcesPagedUnauthorizedError - Unauthorized
type LoadSourcesPagedUnauthorizedError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &LoadSourcesPagedUnauthorizedError{}

func (e *LoadSourcesPagedUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// LoadSourcesPagedBadRequestError - Bad Request
type LoadSourcesPagedBadRequestError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &LoadSourcesPagedBadRequestError{}

func (e *LoadSourcesPagedBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type LoadSourcesPagedData struct {
	Content    []SourceResponse `json:"content,omitempty"`
	Pagination *PaginationData  `json:"pagination,omitempty"`
}

func (o *LoadSourcesPagedData) GetContent() []SourceResponse {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *LoadSourcesPagedData) GetPagination() *PaginationData {
	if o == nil {
		return nil
	}
	return o.Pagination
}

// LoadSourcesPagedResponseBody - OK
type LoadSourcesPagedResponseBody struct {
	Message *string               `json:"message,omitempty"`
	Status  *bool                 `json:"status,omitempty"`
	Data    *LoadSourcesPagedData `json:"data,omitempty"`
}

func (o *LoadSourcesPagedResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *LoadSourcesPagedResponseBody) GetStatus() *bool {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *LoadSourcesPagedResponseBody) GetData() *LoadSourcesPagedData {
	if o == nil {
		return nil
	}
	return o.Data
}

type LoadSourcesPagedResponse struct {
	HTTPMeta HTTPMetadata `json:"-"`
	// OK
	Object *LoadSourcesPagedResponseBody
}

func (o *LoadSourcesPagedResponse) GetHTTPMeta() HTTPMetadata {
	if o == nil {
		return HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *LoadSourcesPagedResponse) GetObject() *LoadSourcesPagedResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
