// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

import (
	"encoding/json"
	"fmt"
)

type GetEndpointsDirection string

const (
	GetEndpointsDirectionNext GetEndpointsDirection = "next"
	GetEndpointsDirectionPrev GetEndpointsDirection = "prev"
)

func (e GetEndpointsDirection) ToPointer() *GetEndpointsDirection {
	return &e
}
func (e *GetEndpointsDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "next":
		fallthrough
	case "prev":
		*e = GetEndpointsDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEndpointsDirection: %v", v)
	}
}

type GetEndpointsRequest struct {
	// Project ID
	ProjectID string                 `pathParam:"style=simple,explode=false,name=projectID"`
	Direction *GetEndpointsDirection `queryParam:"style=form,explode=true,name=direction"`
	// A pagination cursor to fetch the next page of a list
	NextPageCursor *string `queryParam:"style=form,explode=true,name=next_page_cursor"`
	// The owner ID of the endpoint
	OwnerID *string `queryParam:"style=form,explode=true,name=ownerId"`
	// The number of items to return per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A pagination cursor to fetch the previous page of a list
	PrevPageCursor *string `queryParam:"style=form,explode=true,name=prev_page_cursor"`
	// The name of the endpoint
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Sort order, values are `ASC` or `DESC`, defaults to `DESC`
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
}

func (o *GetEndpointsRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetEndpointsRequest) GetDirection() *GetEndpointsDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *GetEndpointsRequest) GetNextPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextPageCursor
}

func (o *GetEndpointsRequest) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetEndpointsRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *GetEndpointsRequest) GetPrevPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.PrevPageCursor
}

func (o *GetEndpointsRequest) GetQ() *string {
	if o == nil {
		return nil
	}
	return o.Q
}

func (o *GetEndpointsRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

// GetEndpointsNotFoundError - Not Found
type GetEndpointsNotFoundError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetEndpointsNotFoundError{}

func (e *GetEndpointsNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GetEndpointsUnauthorizedError - Unauthorized
type GetEndpointsUnauthorizedError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetEndpointsUnauthorizedError{}

func (e *GetEndpointsUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GetEndpointsBadRequestError - Bad Request
type GetEndpointsBadRequestError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetEndpointsBadRequestError{}

func (e *GetEndpointsBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type GetEndpointsData struct {
	Content    []EndpointResponse `json:"content,omitempty"`
	Pagination *PaginationData    `json:"pagination,omitempty"`
}

func (o *GetEndpointsData) GetContent() []EndpointResponse {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *GetEndpointsData) GetPagination() *PaginationData {
	if o == nil {
		return nil
	}
	return o.Pagination
}

// GetEndpointsResponseBody - OK
type GetEndpointsResponseBody struct {
	Message *string           `json:"message,omitempty"`
	Status  *bool             `json:"status,omitempty"`
	Data    *GetEndpointsData `json:"data,omitempty"`
}

func (o *GetEndpointsResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetEndpointsResponseBody) GetStatus() *bool {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetEndpointsResponseBody) GetData() *GetEndpointsData {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetEndpointsResponse struct {
	HTTPMeta HTTPMetadata `json:"-"`
	// OK
	Object *GetEndpointsResponseBody
}

func (o *GetEndpointsResponse) GetHTTPMeta() HTTPMetadata {
	if o == nil {
		return HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEndpointsResponse) GetObject() *GetEndpointsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
