// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

import (
	"encoding/json"
	"fmt"
)

type GetEventDeliveriesPagedDirection string

const (
	GetEventDeliveriesPagedDirectionNext GetEventDeliveriesPagedDirection = "next"
	GetEventDeliveriesPagedDirectionPrev GetEventDeliveriesPagedDirection = "prev"
)

func (e GetEventDeliveriesPagedDirection) ToPointer() *GetEventDeliveriesPagedDirection {
	return &e
}
func (e *GetEventDeliveriesPagedDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "next":
		fallthrough
	case "prev":
		*e = GetEventDeliveriesPagedDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEventDeliveriesPagedDirection: %v", v)
	}
}

type GetEventDeliveriesPagedRequest struct {
	// Project ID
	ProjectID string                            `pathParam:"style=simple,explode=false,name=projectID"`
	Direction *GetEventDeliveriesPagedDirection `queryParam:"style=form,explode=true,name=direction"`
	// The end date
	EndDate *string `queryParam:"style=form,explode=true,name=endDate"`
	// A list of endpoint IDs to filter by
	EndpointID []string `queryParam:"style=form,explode=true,name=endpointId"`
	// Event ID to filter by
	EventID *string `queryParam:"style=form,explode=true,name=eventId"`
	// EventType to filter by
	EventType *string `queryParam:"style=form,explode=true,name=event_type"`
	// IdempotencyKey to filter by
	IdempotencyKey *string `queryParam:"style=form,explode=true,name=idempotencyKey"`
	// A pagination cursor to fetch the next page of a list
	NextPageCursor *string `queryParam:"style=form,explode=true,name=next_page_cursor"`
	// The number of items to return per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A pagination cursor to fetch the previous page of a list
	PrevPageCursor *string `queryParam:"style=form,explode=true,name=prev_page_cursor"`
	// Sort order, values are `ASC` or `DESC`, defaults to `DESC`
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// The start date
	StartDate *string `queryParam:"style=form,explode=true,name=startDate"`
	// A list of event delivery statuses to filter by
	Status []string `queryParam:"style=form,explode=true,name=status"`
	// SubscriptionID to filter by
	SubscriptionID *string `queryParam:"style=form,explode=true,name=subscriptionId"`
}

func (o *GetEventDeliveriesPagedRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetEventDeliveriesPagedRequest) GetDirection() *GetEventDeliveriesPagedDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *GetEventDeliveriesPagedRequest) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *GetEventDeliveriesPagedRequest) GetEndpointID() []string {
	if o == nil {
		return nil
	}
	return o.EndpointID
}

func (o *GetEventDeliveriesPagedRequest) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *GetEventDeliveriesPagedRequest) GetEventType() *string {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *GetEventDeliveriesPagedRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *GetEventDeliveriesPagedRequest) GetNextPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextPageCursor
}

func (o *GetEventDeliveriesPagedRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *GetEventDeliveriesPagedRequest) GetPrevPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.PrevPageCursor
}

func (o *GetEventDeliveriesPagedRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *GetEventDeliveriesPagedRequest) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetEventDeliveriesPagedRequest) GetStatus() []string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetEventDeliveriesPagedRequest) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

// GetEventDeliveriesPagedNotFoundError - Not Found
type GetEventDeliveriesPagedNotFoundError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetEventDeliveriesPagedNotFoundError{}

func (e *GetEventDeliveriesPagedNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GetEventDeliveriesPagedUnauthorizedError - Unauthorized
type GetEventDeliveriesPagedUnauthorizedError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetEventDeliveriesPagedUnauthorizedError{}

func (e *GetEventDeliveriesPagedUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GetEventDeliveriesPagedBadRequestError - Bad Request
type GetEventDeliveriesPagedBadRequestError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetEventDeliveriesPagedBadRequestError{}

func (e *GetEventDeliveriesPagedBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type GetEventDeliveriesPagedData struct {
	Content    []EventDeliveryResponse `json:"content,omitempty"`
	Pagination *PaginationData         `json:"pagination,omitempty"`
}

func (o *GetEventDeliveriesPagedData) GetContent() []EventDeliveryResponse {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *GetEventDeliveriesPagedData) GetPagination() *PaginationData {
	if o == nil {
		return nil
	}
	return o.Pagination
}

// GetEventDeliveriesPagedResponseBody - OK
type GetEventDeliveriesPagedResponseBody struct {
	Message *string                      `json:"message,omitempty"`
	Status  *bool                        `json:"status,omitempty"`
	Data    *GetEventDeliveriesPagedData `json:"data,omitempty"`
}

func (o *GetEventDeliveriesPagedResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetEventDeliveriesPagedResponseBody) GetStatus() *bool {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetEventDeliveriesPagedResponseBody) GetData() *GetEventDeliveriesPagedData {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetEventDeliveriesPagedResponse struct {
	HTTPMeta HTTPMetadata `json:"-"`
	// OK
	Object *GetEventDeliveriesPagedResponseBody
}

func (o *GetEventDeliveriesPagedResponse) GetHTTPMeta() HTTPMetadata {
	if o == nil {
		return HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEventDeliveriesPagedResponse) GetObject() *GetEventDeliveriesPagedResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
