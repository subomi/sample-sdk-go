// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package convoy

import (
	"encoding/json"
	"fmt"
)

type GetSubscriptionsDirection string

const (
	GetSubscriptionsDirectionNext GetSubscriptionsDirection = "next"
	GetSubscriptionsDirectionPrev GetSubscriptionsDirection = "prev"
)

func (e GetSubscriptionsDirection) ToPointer() *GetSubscriptionsDirection {
	return &e
}
func (e *GetSubscriptionsDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "next":
		fallthrough
	case "prev":
		*e = GetSubscriptionsDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSubscriptionsDirection: %v", v)
	}
}

type GetSubscriptionsRequest struct {
	// Project ID
	ProjectID string                     `pathParam:"style=simple,explode=false,name=projectID"`
	Direction *GetSubscriptionsDirection `queryParam:"style=form,explode=true,name=direction"`
	// A list of endpointIDs to filter by
	EndpointID []string `queryParam:"style=form,explode=true,name=endpointId"`
	// Subscription name to filter by
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// A pagination cursor to fetch the next page of a list
	NextPageCursor *string `queryParam:"style=form,explode=true,name=next_page_cursor"`
	// The number of items to return per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A pagination cursor to fetch the previous page of a list
	PrevPageCursor *string `queryParam:"style=form,explode=true,name=prev_page_cursor"`
	// Sort order, values are `ASC` or `DESC`, defaults to `DESC`
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
}

func (o *GetSubscriptionsRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetSubscriptionsRequest) GetDirection() *GetSubscriptionsDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *GetSubscriptionsRequest) GetEndpointID() []string {
	if o == nil {
		return nil
	}
	return o.EndpointID
}

func (o *GetSubscriptionsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetSubscriptionsRequest) GetNextPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.NextPageCursor
}

func (o *GetSubscriptionsRequest) GetPerPage() *int64 {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *GetSubscriptionsRequest) GetPrevPageCursor() *string {
	if o == nil {
		return nil
	}
	return o.PrevPageCursor
}

func (o *GetSubscriptionsRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

// GetSubscriptionsNotFoundError - Not Found
type GetSubscriptionsNotFoundError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetSubscriptionsNotFoundError{}

func (e *GetSubscriptionsNotFoundError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GetSubscriptionsUnauthorizedError - Unauthorized
type GetSubscriptionsUnauthorizedError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetSubscriptionsUnauthorizedError{}

func (e *GetSubscriptionsUnauthorizedError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

// GetSubscriptionsBadRequestError - Bad Request
type GetSubscriptionsBadRequestError struct {
	Message  *string      `json:"message,omitempty"`
	Status   *bool        `json:"status,omitempty"`
	Data     *Object      `json:"data,omitempty"`
	HTTPMeta HTTPMetadata `json:"-"`
}

var _ error = &GetSubscriptionsBadRequestError{}

func (e *GetSubscriptionsBadRequestError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type GetSubscriptionsData struct {
	Content    []SubscriptionResponse `json:"content,omitempty"`
	Pagination *PaginationData        `json:"pagination,omitempty"`
}

func (o *GetSubscriptionsData) GetContent() []SubscriptionResponse {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *GetSubscriptionsData) GetPagination() *PaginationData {
	if o == nil {
		return nil
	}
	return o.Pagination
}

// GetSubscriptionsResponseBody - OK
type GetSubscriptionsResponseBody struct {
	Message *string               `json:"message,omitempty"`
	Status  *bool                 `json:"status,omitempty"`
	Data    *GetSubscriptionsData `json:"data,omitempty"`
}

func (o *GetSubscriptionsResponseBody) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetSubscriptionsResponseBody) GetStatus() *bool {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetSubscriptionsResponseBody) GetData() *GetSubscriptionsData {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetSubscriptionsResponse struct {
	HTTPMeta HTTPMetadata `json:"-"`
	// OK
	Object *GetSubscriptionsResponseBody
}

func (o *GetSubscriptionsResponse) GetHTTPMeta() HTTPMetadata {
	if o == nil {
		return HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSubscriptionsResponse) GetObject() *GetSubscriptionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
